// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using apis.Data;

#nullable disable

namespace apis.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250712002554_RenamePersonCommittee")]
    partial class RenamePersonCommittee
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ArticlePerson", b =>
                {
                    b.Property<int>("ArticlesId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.HasKey("ArticlesId", "AuthorsId");

                    b.HasIndex("AuthorsId");

                    b.ToTable("ArticlePerson");
                });

            modelBuilder.Entity("PersonScientificCommittee", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ScientificCommiteeId")
                        .HasColumnType("int");

                    b.HasKey("PersonId", "ScientificCommiteeId");

                    b.HasIndex("ScientificCommiteeId");

                    b.ToTable("PersonScientificCommittee");
                });

            modelBuilder.Entity("apis.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Complement")
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("apis.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PublicationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("apis.Models.ArticleReview", b =>
                {
                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("ScientificCommitteeId")
                        .HasColumnType("int");

                    b.Property<float>("Grade")
                        .HasColumnType("float");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("ArticleId", "ScientificCommitteeId");

                    b.HasIndex("ScientificCommitteeId");

                    b.ToTable("ArticleReview");
                });

            modelBuilder.Entity("apis.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("apis.Models.PersonSymposium", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("SymposiumId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PersonId", "SymposiumId");

                    b.HasIndex("SymposiumId");

                    b.ToTable("PersonSymposium");
                });

            modelBuilder.Entity("apis.Models.ScientificCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("ScientificCommittee");
                });

            modelBuilder.Entity("apis.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("apis.Models.Symposium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LocationAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LocationAddressId");

                    b.ToTable("Symposium");
                });

            modelBuilder.Entity("apis.Models.SymposiumWorkshopEnrollment", b =>
                {
                    b.Property<int>("SymposiumId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsLecturer")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SymposiumId", "PersonId", "WorkshopId");

                    b.HasIndex("PersonId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("SymposiumWorkshopEnrollment");
                });

            modelBuilder.Entity("apis.Models.Workshop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Workshop");
                });

            modelBuilder.Entity("apis.Models.WorkshopSymposium", b =>
                {
                    b.Property<int>("SymposiumId")
                        .HasColumnType("int");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("SymposiumId", "WorkshopId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("WorkshopSymposium");
                });

            modelBuilder.Entity("ArticlePerson", b =>
                {
                    b.HasOne("apis.Models.Article", null)
                        .WithMany()
                        .HasForeignKey("ArticlesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apis.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonScientificCommittee", b =>
                {
                    b.HasOne("apis.Models.Person", null)
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apis.Models.ScientificCommittee", null)
                        .WithMany()
                        .HasForeignKey("ScientificCommiteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("apis.Models.Article", b =>
                {
                    b.HasOne("apis.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("apis.Models.ArticleReview", b =>
                {
                    b.HasOne("apis.Models.Article", "Article")
                        .WithMany("ArticleReviews")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apis.Models.ScientificCommittee", "ScientificCommittee")
                        .WithMany("ArticleReviews")
                        .HasForeignKey("ScientificCommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("ScientificCommittee");
                });

            modelBuilder.Entity("apis.Models.PersonSymposium", b =>
                {
                    b.HasOne("apis.Models.Person", "Person")
                        .WithMany("PersonSymposium")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apis.Models.Symposium", "Symposium")
                        .WithMany("PersonSymposium")
                        .HasForeignKey("SymposiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Symposium");
                });

            modelBuilder.Entity("apis.Models.ScientificCommittee", b =>
                {
                    b.HasOne("apis.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("apis.Models.Symposium", b =>
                {
                    b.HasOne("apis.Models.Address", "LocationAddress")
                        .WithMany()
                        .HasForeignKey("LocationAddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationAddress");
                });

            modelBuilder.Entity("apis.Models.SymposiumWorkshopEnrollment", b =>
                {
                    b.HasOne("apis.Models.Person", "Person")
                        .WithMany("SymposiumWorkshopEnrollment")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apis.Models.Symposium", "Symposium")
                        .WithMany("SymposiumWorkshopEnrollment")
                        .HasForeignKey("SymposiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apis.Models.Workshop", "Workshop")
                        .WithMany("SymposiumWorkshopEnrollment")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Symposium");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("apis.Models.Workshop", b =>
                {
                    b.HasOne("apis.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("apis.Models.WorkshopSymposium", b =>
                {
                    b.HasOne("apis.Models.Symposium", "Symposium")
                        .WithMany("WorkshopSymposium")
                        .HasForeignKey("SymposiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("apis.Models.Workshop", "Workshop")
                        .WithMany("WorkshopSymposium")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Symposium");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("apis.Models.Article", b =>
                {
                    b.Navigation("ArticleReviews");
                });

            modelBuilder.Entity("apis.Models.Person", b =>
                {
                    b.Navigation("PersonSymposium");

                    b.Navigation("SymposiumWorkshopEnrollment");
                });

            modelBuilder.Entity("apis.Models.ScientificCommittee", b =>
                {
                    b.Navigation("ArticleReviews");
                });

            modelBuilder.Entity("apis.Models.Symposium", b =>
                {
                    b.Navigation("PersonSymposium");

                    b.Navigation("SymposiumWorkshopEnrollment");

                    b.Navigation("WorkshopSymposium");
                });

            modelBuilder.Entity("apis.Models.Workshop", b =>
                {
                    b.Navigation("SymposiumWorkshopEnrollment");

                    b.Navigation("WorkshopSymposium");
                });
#pragma warning restore 612, 618
        }
    }
}
